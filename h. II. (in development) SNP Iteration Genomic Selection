#==================================================
# Preparation of GRM files in bash linux
#==================================================

#!/bin/bash

# Change to output directory
cd $output_directory

# Set variables
bed_file="$input_bed"      # Specify the path to the .bed file prefix
gwas_file="$input_gwas.txt"        # Specify the GWAS SNP file, unsorted
sorted_gwas_file="$output_gwas_sorted.txt"  # File to store the sorted GWAS results
output_prefix="$phenotype_name"          # Prefix for output files
snp_limit=3000                           # SNP limit (maximum number of SNPs)
step_size=100                            # SNPs added per iteration
plink_executable="$plink"  # Set the path to the plink executable

# Sort the GWAS file by p-value (column x) in ascending order
#change accordingly
sort -k11,11g "$gwas_file" > "$sorted_gwas_file"

# Initialize a cumulative SNP subset file
cumulative_snp_subset="cumulative_snp_subset.txt"
> "$cumulative_snp_subset"  # Clear the file at the start

# Loop through the sorted GWAS file and create SNP subsets, incrementally adding step_size SNPs per iteration
for i in $(seq 1 $step_size $snp_limit); do
  end=$((i + step_size - 1))
  
  # Ensure that we stop exactly at snp_limit SNPs if needed
  if [ $end -gt $snp_limit ]; then
    end=$snp_limit
  fi
  
  # Skip the header and extract SNPs (incrementally step_size more at a time) using `tail`
  tail -n +2 "$sorted_gwas_file" | head -n $end | tail -n $step_size | cut -f2 >> "$cumulative_snp_subset"
  
  # Create a bed file using the cumulative SNP subset
  $plink_executable --bfile $bed_file --keep-allele-order --allow-extra-chr --chr-set 46 --allow-no-sex --double-id --extract "$cumulative_snp_subset" --make-bed --out "${output_prefix}_subset_${end}"
  
  # Generate the GRM for the SNP subset
  $plink_executable --bfile "${output_prefix}_subset_${end}" --keep-allele-order --allow-extra-chr --chr-set 46 --allow-no-sex --double-id --make-rel square --out "${output_prefix}_grm_${end}"

  # Stop once snp_limit SNPs have been processed
  if [ $end -eq $snp_limit ]; then
      break
  fi
done

# Cleanup temporary files
rm "$cumulative_snp_subset"

echo "Incremental GRM generation completed for up to $snp_limit SNPs in steps of $step_size."


#==================================================
#Genomic selection in R
#==================================================
# Clean the working environment
rm(list = ls())

# Load libraries
library(BGLR)
library(data.table)
library(dplyr)

#==================================================
# Prepare input data
#==================================================
# Load phenotype data
Y <- read.table("C:/Users/Adrian/Documents/Genomic selection/Input/final_05.pheno", header = TRUE)

# Make "ID" column the row names for the phenotype data
rownames(Y) <- Y$ID
Y <- Y[, -1]

# Select a phenotype (replace "leaf_area" with desired phenotype column name)
phenotype_col <- "leaf_area"  # Specify the phenotype name
y <- Y[[phenotype_col]]

#==================================================
# Parameters for GS
#==================================================
output_files_path <- "C:/Users/Adrian/Documents/Genomic selection/Results"
setwd(output_files_path)

# Choose the GS model to run (modify as needed to select only one)
model <- "GBLUP"  # Select from "GBLUP", "BRR", "LASSO", "BayesB"

# GS parameters
percTST <- 0.3  # Percentage of data in the Testing set
m <- 5           # Number of replicates
nIter <- 1200    # Iterations for BGLR
burnIn <- 200    # Burn-in period

# Number of SNPs to test (as created from the previous Bash script)
snps_to_test <- seq(100, 3000, by = 100)

#==================================================
# Main loop for different SNP subsets and one selected GS model
#==================================================
for (num_snps in snps_to_test) {
  
  # Load GRM for this SNP subset
  grm_file <- paste0("C:/Users/Adrian/Documents/Genomic selection/GRMs/grm_subset_", num_snps, ".rel")
  if (!file.exists(grm_file)) next  # Skip if GRM doesn't exist
  
  G <- as.matrix(fread(grm_file))
  
  # Matrix to store results for this SNP set and model
  outCOR <- matrix(NA, nrow = m, ncol = 1)
  colnames(outCOR) <- model
  
  # Set seeds for replicability
  set.seed(123)
  seeds <- round(seq(1E3, 1E6, length = m))
  nTST <- round(percTST * nrow(Y))
  
  for (k in 1:m) {
    set.seed(seeds[k])
    indexTST <- sample(1:nrow(Y), size = nTST, replace = FALSE)
    yNA <- y
    yNA[indexTST] <- NA  # Mask the test set
    
    # Define ETA based on the selected model
    if (model == "GBLUP")  ETA <- list(list(K = G, model = "RKHS"))
    if (model == "BRR")    ETA <- list(list(X = G, model = "BRR"))
    if (model == "LASSO")  ETA <- list(list(X = G, model = "BL"))
    if (model == "BayesB") ETA <- list(list(X = G, model = "BayesB"))
    
    # Fit the model
    fm <- BGLR(yNA, ETA = ETA, nIter = nIter, burnIn = burnIn)
    
    # Calculate accuracy (correlation)
    outCOR[k, 1] <- cor(fm$yHat[indexTST], y[indexTST], use = "complete.obs")
  }
  
  # Save results for this SNP set and model
  save(outCOR, file = paste0("outCOR_", model, "_", num_snps, "_SNPs_", phenotype_col, ".RData"))
}

#==================================================
# After the loop: Combine and summarize results
#==================================================
OUT <- list()

for (num_snps in snps_to_test) {
  filename <- paste0("outCOR_", model, "_", num_snps, "_SNPs_", phenotype_col, ".RData")
  
  if (file.exists(filename)) {
    load(filename)
    OUT[[paste0(model, "_", num_snps, "_SNPs")]] <- outCOR
  }
}

# Summarize results and save a boxplot
summary_stats <- sapply(OUT, function(x) round(c(Mean = mean(x, na.rm = TRUE), SD = sd(x, na.rm = TRUE)), 4))
print(summary_stats)

# Save boxplot as PNG
png(filename = paste0("GS_model_comparison_", model, "_", phenotype_col, ".png"), width = 800, height = 600)
boxplot(OUT, ylab = "Accuracy", xlab = "SNP Set", main = paste0("GS model comparison for ", model, " and ", phenotype_col))
dev.off()
