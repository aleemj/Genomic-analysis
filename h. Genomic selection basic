#Perform genomic selection for traits in R
#extracted from https://github.com/MarcooLopez/Genomic-Selection/blob/master/single_environment.md
#VanRaden, P. M. (2008). Efficient methods to compute genomic predictions. Journal of dairy science, 91(11), 4414-4423.
#Yang, J., Lee, S. H., Goddard, M. E., & Visscher, P. M. (2011). GCTA: a tool for genome-wide complex trait analysis. American journal of human genetics, 88(1), 76â€“82.
#GRM for genotype file should be produced from plink --make-rel
#refer to b. Reformat genotype files #5. BED file to GRM (for genomic selection)

#==================================================
# genomic_selection.R
#==================================================
#change file names, working directories and ensure phenotype and genotype files are properly formatted.
#genotype file should be grm file from plink --make-rel, m x m matrix the size of the number of samples
#phenotype file should be .txt file containing phenotypes of samples, in same order as grm file. First column is ID. 

# Clean the working environment
rm(list = ls())

# Load libraries
library(BGLR)
library(rrBLUP)
library(data.table)
library(dplyr)

#==================================================
# Prepare input data
#==================================================

# Load data
#make grm with plink --make-rel
G <- as.matrix(fread("C:/Users/Adrian/Documents/Genomic selection/plink_grm_final_05.rel"))
Y <- read.table("C:/Users/Adrian/Documents/Genomic selection/final_05.pheno", head = TRUE)  #load phenotype file

rownames(Y) <- Y$ID
# Remove the "ID" column from the dataframe
Y <- Y[, -1]
# Select a phenotype (the first column)
y <- Y[, 3]

#==================================================
# Comparative Genomic selection using different models
#==================================================

# Set WD for storage of results
output_files_path <- "C:/Users/Adrian/Documents/Genomic selection"
setwd(output_files_path)

# Models
models <- c("GBLUP", "BRR", "LASSO", "BayesB")

# Choose which models. 1:GBLUP; 2:BRR; 3:LASSO; 4:BayesB
MODELS <- c(1, 2, 3, 4)

# Percentage of the data assigned to Testing set
percTST <- 0.3

# Number of replicates
m <- 5

#==================================================

for (mod in MODELS) {
  # Creation of seed for repeated randomizations
  set.seed(123)
  seeds <- round(seq(1E3, 1E6, length = m))
  
  # Matrix to store results. It will save the correlation for each partition
  outCOR <- matrix(NA, nrow = m, ncol = 1)
  colnames(outCOR) <- models[mod]
  
  # Number of iterations and burn-in for Bayesian models
  nIter <- 1200
  burnIn <- 200
  
  model <- models[mod]
  nTST <- round(percTST * nrow(Y))
  
  for (k in 1:m) {  # Loop for the replicates
    set.seed(seeds[k])
    indexTST <- sample(1:nrow(Y), size = nTST, replace = FALSE)
    yNA <- y
    yNA[indexTST] <- NA
    
    # Define the model-specific ETA
    if (model == "GBLUP")  ETA <- list(list(K = G, model = "RKHS"))
    if (model == "BRR")    ETA <- list(list(X = G, model = "BRR"))
    if (model == "LASSO")  ETA <- list(list(X = G, model = "BL"))
    if (model == "BayesB") ETA <- list(list(X = G, model = "BayesB"))
    
    # Fit the model
    fm <- BGLR(yNA, ETA = ETA, nIter = nIter, burnIn = burnIn)
    
    # Calculate the correlation
    outCOR[k, 1] <- cor(fm$yHat[indexTST], y[indexTST], use = "complete.obs")
  }
  
  # Save results
  save(outCOR, file = paste0("outCOR_", model, ".RData"))
}

# Load and combine results
OUT <- c()
for (mod in seq_along(models)) {
  filename <- paste0("outCOR_", models[mod], ".RData")    
  if (file.exists(filename)) {
    load(filename, verbose = TRUE)
    OUT <- cbind(OUT, outCOR)
  }    
}

# Summarize and plot the results
summary_stats <- round(rbind(Mean = apply(OUT, 2, mean), SD = apply(OUT, 2, sd)), 4)
print(summary_stats)

# Save the boxplot as a PNG file
png(filename = "GS_model_comparison_leafarea_boxplot.png", width = 800, height = 600)
boxplot(OUT, ylab = "Accuracy", xlab = "Model", main = "GS model comparison of leaf area prediction accuracy across 5 iterations.")
dev.off()
